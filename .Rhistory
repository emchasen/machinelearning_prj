forearm
armband
38*4
broll <- grep("roll", belt, value = TRUE)
broll
bpitch <- grep("pitch", belt, value = TRUE)
bpitch
byaw <- grep("yaw", belt, value = TRUE)
byaw
belt
training <- training[-c(1, 3:7)]
head(training[54])
head(training[154])
preProc <- preProcess(training[-154], method = "pca", thresh = .9)
preProc
preProc <- preProcess(training[-154], method = "pca", thresh = .8)
preProc
preProc <- preProcess(training[-154], method = "pca", thresh = .85)
preProc
ctrl <- trainControl(preProcOptions = list(thresh = 0.85))
ctrl <- trainControl(preProcOptions = list(thresh = 0.85))
modPCA <- train(classe ~ ., data = training, preProcess = "pca",
trControl = ctrl, method = "glm")
noNA <- training[ , colSums(is.na(training)) == 0]
belt <- grep("belt", names(noNA), value = TRUE)
belt
beltna <- grep("belt", names(noNA), value = TRUE)
belt <- grep("belt", names(training), value = TRUE)
bellna <- grep("dumbbell", names(noNA), value = TRUE)
bellna
armbandna <- grep("forearm", names(noNA), value = TRUE)
armbandna
glovena <- grep("_arm", names(noNA), value = TRUE)
glovena
modPCA <- train(classe ~ ., data = noNA, preProcess = "pca",
trControl = ctrl, method = "glm")
warnings()
modrf <- train(classe ~ ., data = noNA, preProcess = "pca",
trControl = ctrl, method = "rf")
warnings()
sumstats <- training[,colsums(is.na(training)) != 0]
sumstats <- training[,colSums(is.na(training)) != 0]
str(sumstats)
head(sumstats)
sumstats[1:50]
sumstats <- na.omit(sumstats)
str(sumstats)
sumstats[1:50]
train <- read.csv("pml-training.csv", na.strings = c("", "NA", "#DIV/0!"))
set.seed(1126)
inBuild <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
valid <- train[-inBuild,] # validation set
buildData <- train[inBuild,] # use to make test and train data
set.seed(1504)
inTrain <- createDataPartition(y = buildData$classe, p = 0.7, list = FALSE)
training <- buildData[inTrain,]
testing <- buildData[-inTrain,]
training <- training[-c(1, 3:7)]
sumstats <- training[,colSums(is.na(training)) != 0]
str(sumstats)
noNA <- training[ , colSums(is.na(training)) == 0]
summary(noNA)
sumstats <- training[,colSums(is.na(training)) != 0]
summary(sumstats)
sumstats <- na.omit(sumstats)
summary(sumstats)
modPCA
ctrl <- trainControl(preProcOptions = list(thresh = 0.85))
modPCA <- train(classe ~ ., data = training, preProcess = "pca",
trControl = ctrl, method = "glm")
ctrl <- trainControl(preProcOptions = list(thresh = 0.85))
modrf <- train(classe ~ ., data = noNA, preProcess = "pca",
trControl = ctrl, method = "rf")
setwd("Google Drive/coursera/machine learning/course project") # set working directory
getwd()
train <- read.csv("pml-training.csv", na.strings = c("", "NA", "#DIV/0!"))
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
test <- read.csv("pml-testing.csv")
library(caret)
library(dplyr)
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
dim(training)
levels(training$classe)
training <- training[-c(1, 3:7)]
noNA <- training[ , colSums(is.na(training)) == 0]
summary(noNA)
sumstats <- training[,colSums(is.na(training)) != 0]
str(sumstats)
sumstats <- na.omit(sumstats)
str(sumstats)
sumstats$kurtosis_roll_belt[1:25]
sumstats$kurtosis_pitch_belt[1:25]
sumstats$kurtosis_picth_belt[1:25]
sumstats$min_y[1:25]
sumstats$min_yaw_forearm[1:25]
featurePlot(x=noNA[,2:5], y = noNA$classe, plot = "pairs", auto.key=list(columns=5))
featurePlot(x=noNA[,6:9], y = noNA$classe, plot = "pairs", auto.key=list(columns=5))
featurePlot(x=noNA[,10:13], y = noNA$classe, plot = "pairs", auto.key=list(columns=5))
featurePlot(x=noNA[,14:17], y = noNA$classe, plot = "pairs", auto.key=list(columns=5))
descrCorr <- cor(noNA[-c(1,54)])
highCor <- findCorrleation(descrCorr, 0.90)
highCor <- findCorrelation(descrCorr, 0.90)
corOut <- noNA[,-highCor]
ncol(corOut)
highCor <- findCorrelation(descrCorr, 0.85)
corOut <- noNA[,-highCor]
ncol(corOut)
highCor <- findCorrelation(descrCorr, 0.9)
corOut <- noNA[,-highCor]
ncol(corOut)
head(corOut)
ctrl <- trainControl(preProcOptions = list(thresh = 0.85))
modPCA <- train(classe ~ ., data = corOut, preProcess = "pca",
trControl = ctrl, method = "glm")
warnings()
modGLM <- train(classe ~ ., data = corOut, method = "glm")
modGLM <- train(classe ~ ., data = noNA, method = "glm")
modGLM <- train(classe ~ ., data = training, method = "glm")
modGLM <- train(classe ~ ., data = noNA, method = "glm")
warnings()
ctrl <- trainControl(preProcOptions = list(thresh = 0.85))
modPCA <- train(classe ~ ., data = corOut, preProcess = "pca",
modRF <- train(classe ~ ., data = corOut, method = "rf")
ctrl <- trainControl(preProcOptions = list(thresh = 0.85))
modPCA <- train(classe ~ ., data = corOut, preProcess = "pca",
trControl = ctrl, method = "lm")
modPCA <- train(classe ~ ., data = corOut, preProcess = "pca",
trControl = ctrl, method = "rf")
warnings()
set.seed(3433)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
library(caret)
library(ElemStatLearn)
library(pgmm)
library(rpart)
library(gbm)
library(lubridate)
library(forecast)
library(e1071)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modrf <- train(diagnosis ~., method = "rf", data = training)
set.seed(62433)
modgbm <- train(diagnosis ~., method = "gbm", data = training, verbose = FALSE)
set.seed(62433)
modlda <- train(diagnosis ~., method = "lda", data = training)
prf <- predict(modrf, testing)
pgbm <- predict(modgbm, testing)
plda <- predict(modlda, testing)
cmrf <- confusionMatrix(prf, testing$diagnosis)
cmgbm <- confusionMatrix(pgbm, testing$diagnosis)
cmlda <- confusionMatrix(plda, testing$diagnosis)
str(prf)
prf
stack <- data.frame(prf, pgbm, plda, diag = testing$diagnosis)
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
heat(training[10:20])
head(training[10:20])
str(training)
noNA <- training[ , colSums(is.na(training)) == 0]
str(noNA)
sumstats <- training[,colSums(is.na(training)) != 0]
sumstats <- na.omit(sumstats)
training[1:5]
head(training[1:5])
belt <- grep("belt", names(training), value = TRUE)
belt
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
str(training)
training$kurtosis_roll_belt[1:100]
training$kurtosis_roll_belt[1:100][18]
training$kurtosis_roll_belt[1:100][2*18]
belt <- grep("belt", names(training), value = TRUE)
belt
training$roll_belt[1:18]
training$max_roll_belt[1:100]
training$max_roll_belt[1:100][18] # first non NA value
training$kurtosis_roll_belt[1:100][18] # first non NA value
training$kurtosis_roll_belt[1:100]
train <- read.csv("pml-training.csv")
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training$max_roll_belt[1:100]
training$kurtosis_roll_belt[1:100]
class(training$kurtosis_roll_belt)
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
train <- read.csv("pml-training.csv")
class(training$kurtosis_roll_belt)
training$kurtosis_roll_belt[1:100]
training$kurtosis_roll_belt <- as.numeric(training$kurtosis_roll_belt)
class(training$kurtosis_roll_belt)
training$kurtosis_roll_belt[1:100]
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training$max_roll_belt[1:100]
training$kurtosis_roll_belt[1:100]
train <- read.csv("pml-training.csv", na.strings = c(""))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training$max_roll_belt[1:100]
training$kurtosis_roll_belt[1:100]
train <- read.csv("pml-training.csv")
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
apply(training, 2, function(x) gsub("^$|^ $", NA, x))
training <- apply(training, 2, function(x) gsub("^$|^ $", NA, x))
training$max_roll_belt[1:100]
head(training)
train <- read.csv("pml-training.csv")
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training <- apply(training, 2, function(x) gsub(" ", NA, x))
training$max_roll_belt[1:100]
train <- read.csv("pml-training.csv")
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training <- apply(training, 2, function(x) gsub("", NA, x))
training$max_roll_belt[1:100]
summary(training)
head(summary(training))
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training$max_roll_belt[1:100]
is.na(training$max_roll_belt[1:100])
is.na(training$kurtosis_roll_belt[1:100])
training$kurtosis_roll_belt[1:100]
train <- read.csv("pml-training.csv")
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
is.na(training$max_roll_belt[1:100])
is.na(training$kurtosis_roll_belt[1:100])
training$kurtosis_roll_belt[1:100]
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training$kurtosis_roll_belt <- as.numeric(levels(training$kurtosis_roll_belt))[training$kurtosis_roll_belt]
is.na(training$kurtosis_roll_belt[1:100])
training$kurtosis_roll_belt[1:100]
class(training$kurtosis_roll_belt)
summary(training)
str(training)
levels(training$amplitude_yaw_belt)
training <- training[-c("kurtosis_yaw_belt", "skewness_yaw_belt")]
training <- subset(training, select = -c(kurtosis_yaw_belt, skewness_yaw_belt)]
training <- subset(training, select = -c(kurtosis_yaw_belt, skewness_yaw_belt))
str(training)
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training$max_roll_belt[1:100]
training$kurtosis_roll_belt[1:100]
training <- subset(training, select = -c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt,
kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbell))
training <- subset(training, select = -c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt,
kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell))
str(training)
training$kurtosis_roll_belt <- as.numeric(levels(training$kurtosis_roll_belt))[training$kurtosis_roll_belt]
str(training)
training$kurtosis_picth_belt <- as.numeric(levels(training$kurtosis_picth_belt))[training$kurtosis_picth_belt]
str(training)
training$skewness_roll_belt <- as.numeric(levels(training$skewness_roll_belt))[training$skewness_roll_belt]
str(training)
training$kurtosis_roll_belt.1 <- as.numeric(levels(training$kurtosis_roll_belt.1))[training$kurtosis_roll_belt.1]
head(training$kurtosis_roll_belt.1)
training$skewness_roll_belt.1 <- as.numeric(levels(training$skewness_roll_belt.1))[training$skewness_roll_belt.1]
str(training)
training$max_yaw_belt <- as.numeric(levels(training$max_yaw_belt))[training$max_yaw_belt]
str(training)
training$min_yaw_belt <- as.numeric(levels(training$min_yaw_belt))[training$min_yaw_belt]
str(training)
training$kurtosis_roll_arm <- as.numeric(levels(training$kurtosis_roll_arm))[training$kurtosis_roll_arm]
str(training)
training$kurtosis_picth_arm <- as.numeric(levels(training$kurtosis_picth_arm))[training$kurtosis_picth_arm]
training$kurtosis_yaw_arm <- as.numeric(levels(training$kurtosis_yaw_arm))[training$kurtosis_yaw_arm]
training$skewness_roll_arm <- as.numeric(levels(training$skewness_roll_arm))[training$skewness_roll_arm]
training$skewness_pitch_arm <- as.numeric(levels(training$skewness_pitch_arm))[training$skewness_pitch_arm]
str(training)
training$skewness_yaw_arm <- as.numeric(levels(training$skewness_yaw_arm))[training$skewness_yaw_arm]
training$kurtosis_roll_dumbbell <- as.numeric(levels(training$kurtosis_roll_dumbbell))[training$kurtosis_roll_dumbbell]
training$kurtosis_picth_dumbbell <- as.numeric(levels(training$kurtosis_picth_dumbbell))[training$kurtosis_picth_dumbbell]
str(training)
training$skewness_roll_dumbbell <- as.numeric(levels(training$skewness_roll_dumbbell))[training$skewness_roll_dumbbell]
training$skewness_pitch_dumbbell <- as.numeric(levels(training$skewness_pitch_dumbbell))[training$skewness_pitch_dumbbell]
str(training)
training$max_yaw_dumbbell <- as.numeric(levels(training$max_yaw_dumbbell))[training$max_yaw_dumbbell]
training$min_yaw_dumbbell <- as.numeric(levels(training$min_yaw_dumbbell))[training$min_yaw_dumbbell]
str(training)
head(training)
training <- training[-c(1, 3:4)]
head(training)
training$kurtosis_roll_belt <- as.numeric(levels(training$kurtosis_roll_belt))[training$kurtosis_roll_belt]
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
training <- training[-c(1, 3:4)]
training <- subset(training, select = -c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt,
kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell))
training$kurtosis_roll_belt <- as.numeric(levels(training$kurtosis_roll_belt))[training$kurtosis_roll_belt]
training$kurtosis_picth_belt <- as.numeric(levels(training$kurtosis_picth_belt))[training$kurtosis_picth_belt]
training$skewness_roll_belt <- as.numeric(levels(training$skewness_roll_belt))[training$skewness_roll_belt]
training$skewness_roll_belt.1 <- as.numeric(levels(training$skewness_roll_belt.1))[training$skewness_roll_belt.1]
training$max_yaw_belt <- as.numeric(levels(training$max_yaw_belt))[training$max_yaw_belt]
training$min_yaw_belt <- as.numeric(levels(training$min_yaw_belt))[training$min_yaw_belt]
training$kurtosis_roll_arm <- as.numeric(levels(training$kurtosis_roll_arm))[training$kurtosis_roll_arm]
training$kurtosis_picth_arm <- as.numeric(levels(training$kurtosis_picth_arm))[training$kurtosis_picth_arm]
training$kurtosis_yaw_arm <- as.numeric(levels(training$kurtosis_yaw_arm))[training$kurtosis_yaw_arm]
training$skewness_roll_arm <- as.numeric(levels(training$skewness_roll_arm))[training$skewness_roll_arm]
training$skewness_pitch_arm <- as.numeric(levels(training$skewness_pitch_arm))[training$skewness_pitch_arm]
training$skewness_yaw_arm <- as.numeric(levels(training$skewness_yaw_arm))[training$skewness_yaw_arm]
training$kurtosis_roll_dumbbell <- as.numeric(levels(training$kurtosis_roll_dumbbell))[training$kurtosis_roll_dumbbell]
training$kurtosis_picth_dumbbell <- as.numeric(levels(training$kurtosis_picth_dumbbell))[training$kurtosis_picth_dumbbell]
training$skewness_roll_dumbbell <- as.numeric(levels(training$skewness_roll_dumbbell))[training$skewness_roll_dumbbell]
training$skewness_pitch_dumbbell <- as.numeric(levels(training$skewness_pitch_dumbbell))[training$skewness_pitch_dumbbell]
training$max_yaw_dumbbell <- as.numeric(levels(training$max_yaw_dumbbell))[training$max_yaw_dumbbell]
training$min_yaw_dumbbell <- as.numeric(levels(training$min_yaw_dumbbell))[training$min_yaw_dumbbell]
head(training)
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
head(training)
training <- training[-c(1, 3:4)]
head(training)
training <- subset(training, select = -c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt,
kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell))
head(training)
training$kurtosis_roll_belt <- as.numeric(levels(training$kurtosis_roll_belt))[training$kurtosis_roll_belt]
training$kurtosis_picth_belt <- as.numeric(levels(training$kurtosis_picth_belt))[training$kurtosis_picth_belt]
training$skewness_roll_belt <- as.numeric(levels(training$skewness_roll_belt))[training$skewness_roll_belt]
training$skewness_roll_belt.1 <- as.numeric(levels(training$skewness_roll_belt.1))[training$skewness_roll_belt.1]
training$max_yaw_belt <- as.numeric(levels(training$max_yaw_belt))[training$max_yaw_belt]
training$min_yaw_belt <- as.numeric(levels(training$min_yaw_belt))[training$min_yaw_belt]
training$kurtosis_roll_arm <- as.numeric(levels(training$kurtosis_roll_arm))[training$kurtosis_roll_arm]
training$kurtosis_picth_arm <- as.numeric(levels(training$kurtosis_picth_arm))[training$kurtosis_picth_arm]
training$kurtosis_yaw_arm <- as.numeric(levels(training$kurtosis_yaw_arm))[training$kurtosis_yaw_arm]
training$skewness_roll_arm <- as.numeric(levels(training$skewness_roll_arm))[training$skewness_roll_arm]
training$skewness_pitch_arm <- as.numeric(levels(training$skewness_pitch_arm))[training$skewness_pitch_arm]
training$skewness_yaw_arm <- as.numeric(levels(training$skewness_yaw_arm))[training$skewness_yaw_arm]
training$kurtosis_roll_dumbbell <- as.numeric(levels(training$kurtosis_roll_dumbbell))[training$kurtosis_roll_dumbbell]
training$kurtosis_picth_dumbbell <- as.numeric(levels(training$kurtosis_picth_dumbbell))[training$kurtosis_picth_dumbbell]
training$skewness_roll_dumbbell <- as.numeric(levels(training$skewness_roll_dumbbell))[training$skewness_roll_dumbbell]
training$skewness_pitch_dumbbell <- as.numeric(levels(training$skewness_pitch_dumbbell))[training$skewness_pitch_dumbbell]
training$max_yaw_dumbbell <- as.numeric(levels(training$max_yaw_dumbbell))[training$max_yaw_dumbbell]
training$min_yaw_dumbbell <- as.numeric(levels(training$min_yaw_dumbbell))[training$min_yaw_dumbbell]
head(training)
str(training)
head(training)
training$amplitude_yaw_forearm <- as.numeric(levels(training$amplitude_yaw_forearm))[training$amplitude_yaw_forearm]
training$min_yaw_forearm <- as.numeric(levels(training$min_yaw_forearm))[training$min_yaw_forearm]
training$max_yaw_forearm <- as.numeric(levels(training$max_yaw_forearm))[training$max_yaw_forearm]
training$skewness_yaw_forearm <- as.numeric(levels(training$skewness_yaw_forearm))[training$skewness_yaw_forearm]
training$skewness_pitch_forearm <- as.numeric(levels(training$skewness_pitch_forearm))[training$skewness_pitch_forearm]
training$skewness_roll_forearm <- as.numeric(levels(training$skewness_roll_forearm))[training$skewness_roll_forearm]
str(training)[80:151]
str(training[80:151])
train <- read.csv("pml-training.csv", na.strings = c("", "NA"))
set.seed(1126)
inTrain <- createDataPartition(y=train$classe, p=0.7, list = FALSE)
testing <- train[-inTrain,] # validation set
training <- train[inTrain,] # use to make test and train data
str(training[80:151])
str(training[80:160])
str(training[50:80])
str(training[30:80])
str(training[1:80])
str(training[80:160])
training <- subset(training, select = -c(kurtosis_yaw_belt, skewness_yaw_belt, amplitude_yaw_belt,
kurtosis_yaw_dumbbell, skewness_yaw_dumbbell, amplitude_yaw_dumbbell,
kurtosis_yaw_forearm, amplitude_yaw_forearm, skewness_yaw_forearm
))
str(training)
training$kurtosis_roll_belt <- as.numeric(levels(training$kurtosis_roll_belt))[training$kurtosis_roll_belt]
training$kurtosis_picth_belt <- as.numeric(levels(training$kurtosis_picth_belt))[training$kurtosis_picth_belt]
training$skewness_roll_belt <- as.numeric(levels(training$skewness_roll_belt))[training$skewness_roll_belt]
training$skewness_roll_belt.1 <- as.numeric(levels(training$skewness_roll_belt.1))[training$skewness_roll_belt.1]
training$max_yaw_belt <- as.numeric(levels(training$max_yaw_belt))[training$max_yaw_belt]
training$min_yaw_belt <- as.numeric(levels(training$min_yaw_belt))[training$min_yaw_belt]
training$kurtosis_roll_arm <- as.numeric(levels(training$kurtosis_roll_arm))[training$kurtosis_roll_arm]
training$kurtosis_picth_arm <- as.numeric(levels(training$kurtosis_picth_arm))[training$kurtosis_picth_arm]
training$kurtosis_yaw_arm <- as.numeric(levels(training$kurtosis_yaw_arm))[training$kurtosis_yaw_arm]
training$skewness_roll_arm <- as.numeric(levels(training$skewness_roll_arm))[training$skewness_roll_arm]
training$skewness_pitch_arm <- as.numeric(levels(training$skewness_pitch_arm))[training$skewness_pitch_arm]
training$skewness_yaw_arm <- as.numeric(levels(training$skewness_yaw_arm))[training$skewness_yaw_arm]
training$kurtosis_roll_dumbbell <- as.numeric(levels(training$kurtosis_roll_dumbbell))[training$kurtosis_roll_dumbbell]
training$kurtosis_picth_dumbbell <- as.numeric(levels(training$kurtosis_picth_dumbbell))[training$kurtosis_picth_dumbbell]
training$skewness_roll_dumbbell <- as.numeric(levels(training$skewness_roll_dumbbell))[training$skewness_roll_dumbbell]
training$skewness_pitch_dumbbell <- as.numeric(levels(training$skewness_pitch_dumbbell))[training$skewness_pitch_dumbbell]
training$max_yaw_dumbbell <- as.numeric(levels(training$max_yaw_dumbbell))[training$max_yaw_dumbbell]
training$min_yaw_dumbbell <- as.numeric(levels(training$min_yaw_dumbbell))[training$min_yaw_dumbbell]
training$min_yaw_forearm <- as.numeric(levels(training$min_yaw_forearm))[training$min_yaw_forearm]
training$max_yaw_forearm <- as.numeric(levels(training$max_yaw_forearm))[training$max_yaw_forearm]
training$skewness_pitch_forearm <- as.numeric(levels(training$skewness_pitch_forearm))[training$skewness_pitch_forearm]
training$skewness_roll_forearm <- as.numeric(levels(training$skewness_roll_forearm))[training$skewness_roll_forearm]
head(training)
training$kurtosis_roll_forearm[1:100]
training$kurtosis_roll_forearm <- as.numeric(levels(training$kurtosis_roll_forearm))[training$kurtosis_roll_forearm]
training$kurtosis_picth_forearm <- as.numeric(levels(training$kurtosis_picth_forearm))[training$kurtosis_picth_forearm]
head(training)
training$X[1:100]
training <- training[-c(1, 3:4)]
head(training)
colSums(is.na(training)) == 0
noNA <- training[ , colSums(is.na(training)) == 0]
summary(noNA)
sumstats <- training[,colSums(is.na(training)) != 0]
str(sumstats)
sumstats <- na.omit(sumstats)
summary(noNA)
descrCorr <- cor(noNA[-c(1,2:4,57)])
descrCorr
head(descrCorr)
highCor <- findCorrelation(descrCorr, 0.9)
highCor
names(noNA[10])
names(highCor[10])
cordata <- noNA[5:56]
descrCorr <- cor(cordata)
highCor <- findCorrelation(descrCorr, 0.9)
corOut <- cordata[,-highCor]
newdat <- rbind(noNA[c(1:4,57)], corOut)
newdat <- cbind(noNA[c(1:4,57)], corOut)
modRF <- train(classe ~ ., data = newdat, method = "rf")
modRF <- train(classe ~ ., data = newdat, method = "rf", prox = "TRUE")
warnings()
head(newdat)
class(training$classe)
levels(training$classe)
lapply(newdat, class)
newdat <- cbind(noNA[c(57)], corOut)
modRF <- train(classe ~ ., data = newdat, method = "rf", prox = "TRUE")
warnings()
sum(is.na(newdat))
control <- trainControl(method="repeatedcv", number=10, repeats=3)
seed <- 7
metric <- "Accuracy"
set.seed(seed)
mtry <- sqrt(ncol(x))
mtry <- sqrt(ncol(newdat)-1)
tunegrid <- expand.grid(.mtry=mtry)
modRF <- train(classe ~ ., data = newdat, method = "rf", metric=metric, tuneGrid=tunegrid, trControl=control)
head(newdat)
head(sumstats)
sumstats <- training[,colSums(is.na(training)) != 0]
com <- complete.cases(sumstats)
com[1:100]
head(sumstats)
sumstats$classe <- training$classe
head(sumstats)
sumstats <- na.omit(sumstats)
head(sumstats)
modRF <- train(classe ~ ., data = sumstats, method = "rf", metric=metric, tuneGrid=tunegrid, trControl=control)
modRF
mtry <- sqrt(ncol(sumstats)-1)
modRF <- train(classe ~ ., data = sumstats, method = "rf", metric=metric, tuneGrid=tunegrid, trControl=control)
modRF
cordata <- sumstats[-92]
descrCorr <- cor(cordata)
head(descrCorr)
highCor <- findCorrelation(descrCorr, 0.9)
corOut <- cordata[,-highCor]
newdatsum <- cbind(noNA[c(92)], corOut)
newdatsum <- cbind(sumstats[c(92)], corOut)
modRF <- train(classe ~ ., data = newdatsum, method = "rf", metric=metric, tuneGrid=tunegrid, trControl=control)
modRF
sumstats$logical <- ifelse(sumstats$classe == "A", "yes", "no")
head(sumstats)
newdatlog <- cbind(sumstats[c(93)], corOut)
modRF <- train(classe ~ ., data = newdatlog, method = "rf", metric=metric, tuneGrid=tunegrid, trControl=control)
modRF <- train(logical ~ ., data = newdatlog, method = "rf", metric=metric, tuneGrid=tunegrid, trControl=control)
modRF
